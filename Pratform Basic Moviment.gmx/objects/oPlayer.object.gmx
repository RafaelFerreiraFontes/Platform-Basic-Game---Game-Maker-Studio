<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0.5;//Gravit of Player
hsp = 0;//Horizontal speed
vsp = 0;//Vertical speed

walkForce = 5;
jumpForce = 10.5;
dashPass = 7;
dashCount = 0;
dashDistance = 90;

isOnFloor = false;//Check if player is on Floor.
canDash = true;//Check if player can dash.
isOnDash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] &gt;= 0) alarm[0]--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get Player Inputs
keyLeft = keyboard_check(vk_left);
keyRight = keyboard_check(vk_right);
keyJump = keyboard_check(ord("Z"));
keyDash = keyboard_check(ord("X"));

//Calculate Movement:
var move = keyRight - keyLeft;

//Check if Player is On Floor:
isOnFloor = place_meeting(x,y + 1,oSolid);

//Calculate horizontal speed:
hsp = move * walkForce;

//Calculate vertical speed:
vsp += grav;

//Calculate Variable Jump
if(keyJump and isOnFloor)
{
  vsp = -jumpForce;
}
//If player is jumping and not keyJump
else if(!keyJump and vsp &lt; 0)
{
  vsp = 0;//Set vertical speed to zero.(cancel jump)
}

//Calculate dash:
if(keyDash and canDash and !isOnDash)
{
   isOnDash = true;//Set is On Dash to true
   canDash = false;//Set can Dash to false
   dashCount = 0;//Set dash Count to 0
   alarm[0] = room_speed;//Set alarm time to room_speed
}

//While is On Dash and dash Count &lt; dash Distance
if(isOnDash and dashCount &lt; dashDistance)
{
   hsp = image_xscale * dashPass;//Set horizontal speed to image_xscale multiplies dash Pass
   dashCount += dashPass; //Increment dash Pass in dash Count    
   vsp = 0;//Set vertical speed to zero.
   canDash = false;//Set can Dash to false
}
//If dash Count &gt;= dash Distance   
else if(dashCount &gt;= dashDistance)
{
  dashCount = 0;//Set dash Count to 0
  isOnDash = false;//Set is On Dash to false
}
//if alarm[0] == -1 and not can Dash 
if(alarm[0] == -1 and !canDash)
{
  canDash = true;
}

//Horizontal Collision Check
if(place_meeting(x + hsp,y,oSolid))
{
   while(!place_meeting(x + sign(hsp),y,oSolid))
   {
     x += sign(hsp);
   }
   hsp = 0;
   isOnDash = false;
   canDash = true;
}
x += hsp;

//Vertical Collision Check
if(place_meeting(x,y + vsp,oSolid))
{
   while(!place_meeting(x,y + sign(vsp),oSolid))
   {
     y += sign(vsp);
   }
   vsp = 0;
   isOnDash = false;
}
y += vsp;

//Mirrored Sprite
if(hsp != 0)
 image_xscale = sign(hsp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
